last_genie_expression = None
import os
import random
import pygame
from openai import OpenAI
from dotenv import load_dotenv

# –Ω–µ–π—Ä–æ–Ω–∫–∞ init
load_dotenv()  # .env
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url=os.getenv("OPENAI_API_BASE")
)
model_name = "openai/gpt-3.5-turbo"
# "google/gemini-2.0-flash-exp:free"
# "deepseek/deepseek-r1-0528-qwen3-8b:free"
# "deepseek/deepseek-r1-0528:free"
# "tngtech/deepseek-r1t-chimera:free"
# "mistralai/devstral-small:free"

# –ø–∞–π–≥–µ–π–º init
pygame.init()
WIDTH, HEIGHT = 700, 1000
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("–ò–≥—Ä–∞ –ê–∫–∏–Ω–∞—Ç–æ—Ä")

# gr–∞—Ñ–∏–∫–∞
background = pygame.image.load("background.jpg")
genie_images = {
    "neutral": pygame.image.load("genie.png"),
    "happy": pygame.image.load("genie_happy.png"),
    "nervous": pygame.image.load("genie_nervous.png"),
    "thinker": pygame.image.load("genie_thinker.png")
}
current_genie = genie_images["neutral"]

# –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
end_button_y = 350

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–µ
button_width = 120
button_height = 50
button_spacing = 20
total_width = 5 * button_width + 4 * button_spacing
start_x = (WIDTH - total_width) // 2
button_y = 250

button_yes = pygame.Rect(start_x + 0 * (button_width + button_spacing), button_y, button_width, button_height)
button_no = pygame.Rect(start_x + 1 * (button_width + button_spacing), button_y, button_width, button_height)
button_unknown = pygame.Rect(start_x + 2 * (button_width + button_spacing), button_y, button_width, button_height)
button_maybe_yes = pygame.Rect(start_x + 3 * (button_width + button_spacing), button_y, button_width, button_height)
button_maybe_no = pygame.Rect(start_x + 4 * (button_width + button_spacing), button_y, button_width, button_height)

# —à—Ä–∏—Ñ—Ç
font = pygame.font.Font(None, 28)

def draw_question_box(text, font, pos, max_width=660, padding=10, bg_color=(255,255,255), alpha=200):
    """
    —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ —Ä–µ–¥–∞—á–∏—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏ –≤ –ø—Ä–∏–µ–º–ª–µ–º—ã–π –≤–∏–¥, —Å–æ–∑–¥–∞–≤–∞—è —Ñ–æ–Ω, –≥—Ä–∞–Ω–∏—Ü—É –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è —Ä–∞–∑–º–µ—Ä—ã.
    """
    words = text.replace('\n', ' \n ').split()
    lines = []
    current_line = ""
    
    for word in words:
        if word == "\n":
            lines.append(current_line)
            current_line = ""
            continue
        test_line = current_line + word + " "
        if font.size(test_line)[0] <= max_width - 2 * padding:
            current_line = test_line
        else:
            lines.append(current_line)
            current_line = word + " "
    lines.append(current_line)

    # –≤—ã—Å–æ—Ç–∞
    line_height = font.get_height()
    box_height = len(lines) * line_height + 2 * padding
    box_width = max_width

    # –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    box_surface = pygame.Surface((box_width, box_height), pygame.SRCALPHA)
    box_surface.set_alpha(alpha)
    box_surface.fill(bg_color)
    screen.blit(box_surface, pos)
    pygame.draw.rect(screen, (0, 0, 0), (*pos, box_width, box_height), 2)

    # –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–∫–æ—à–∫–æ
    for i, line in enumerate(lines):
        text_surface = font.render(line, True, (0, 0, 0))
        screen.blit(text_surface, (pos[0] + padding, pos[1] + padding + i * line_height))

def draw_text(text, x, y, color=(0,0,0)):
    """ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É text –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (x,y). """
    lines = text.split('\n')
    for i, line in enumerate(lines):
        text_surface = font.render(line, True, color)
        screen.blit(text_surface, (x, y + i*30))

def draw_button_text(text, rect):
    text_surface = font.render(text, True, (255, 255, 255))
    text_rect = text_surface.get_rect(center=rect.center)
    screen.blit(text_surface, text_rect)

# —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –≥–ø—Ç
messages = [
    {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –ê–∫–∏–Ω–∞—Ç–æ—Ä. –ò–≥—Ä–æ–∫ –∑–∞–≥–∞–¥–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ). "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å –µ–≥–æ, –∑–∞–¥–∞–≤–∞—è –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: "
            "–î–∞, –ù–µ—Ç, –ù–µ –∑–Ω–∞—é, –°–∫–æ—Ä–µ–µ –¥–∞, –°–∫–æ—Ä–µ–µ –Ω–µ—Ç. "
            "–ü–æ—Å–ª–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–π –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Å–∫–∞–∑–∞–≤ —Ñ—Ä–∞–∑—É –≤–∏–¥–∞: '–Ø –¥—É–º–∞—é, —Ç—ã –∑–∞–≥–∞–¥–∞–ª: ...'. "
            "–ù–µ –æ–±—ä—è—Å–Ω—è–π, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. –ù–µ –ø–∏—à–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã."
            "‚ùó–í–∞–∂–Ω–æ: –Ω–µ —Ä–∞—Å—Å—É–∂–¥–∞–π, –Ω–µ –æ–±—ä—è—Å–Ω—è–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n"
            "–ù–∏–∫–∞–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ç–∏–ø–∞ '–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ'. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
        )
    },
    {
        "role": "assistant",
        "content": (
            "–ü—Ä–∏–≤–µ—Ç! –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ –ê–∫–∏–Ω–∞—Ç–æ—Ä–∞ üé©\n"
            "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–π: –î–∞, –ù–µ—Ç, –ù–µ –∑–Ω–∞—é, –°–∫–æ—Ä–µ–µ –¥–∞, –°–∫–æ—Ä–µ–µ –Ω–µ—Ç.\n"
            "–ù–∞–∂–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –∏ –Ω–∞—á–Ω—ë–º!"
        )
    }
]

# 1 –≤–æ–ø—Ä–æ—Å
short_messages = messages[:1] + messages[-11:]  # –º–∞–∫—Å–∏–º—É–º 6 —Ä–∞—É–Ω–¥–æ–≤ (assistant-user)
resp = client.chat.completions.create(
    model=model_name,
    messages=short_messages,
    max_tokens=500
)
question = resp.choices[0].message.content
messages.append({"role": "assistant", "content": question})

show_end_button = False
end_button = pygame.Rect(WIDTH // 2 - 75, end_button_y, 150, 50)
pressed_button = None

running = True
while running:
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # –∫–ª–∏–∫–∏ –º—ã—à–∏
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            user_answer = None
            if button_yes.collidepoint(mouse_pos):
                user_answer = "–î–∞"
            elif button_no.collidepoint(mouse_pos):
                user_answer = "–ù–µ—Ç"
            elif button_unknown.collidepoint(mouse_pos):
                user_answer = "–ù–µ –∑–Ω–∞—é"
            elif button_maybe_yes.collidepoint(mouse_pos):
                user_answer = "–°–∫–æ—Ä–µ–µ –¥–∞"
            elif button_maybe_no.collidepoint(mouse_pos):
                user_answer = "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"

            if user_answer:
                pressed_button = user_answer
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à –æ—Ç–≤–µ—Ç –≤ –≥–ø—Ç
                messages.append({"role": "user", "content": user_answer})
                # –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—ã–ª–æ –º–µ–Ω—å—à–µ 10, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                if len(messages) < 2*10:  # 1 system + 10*(assistant+user) ‚âà 21
                    short_messages = messages[:1] + messages[-11:]  # –º–∞–∫—Å–∏–º—É–º 6 —Ä–∞—É–Ω–¥–æ–≤ (assistant-user)
                    resp = client.chat.completions.create(
                        model=model_name,
                        messages=short_messages,
                        max_tokens=600
                    )
                    question = resp.choices[0].message.content
                    messages.append({"role": "assistant", "content": question})
                    new_expression = random.choice(["neutral", "happy", "nervous", "thinker"])
                    while new_expression == last_genie_expression:
                        new_expression = random.choice(["neutral", "happy", "nervous", "thinker"])
                    current_genie = genie_images[new_expression]
                    last_genie_expression = new_expression
                    pressed_button = None
                else:
                    # –ø–æ—Å–ª–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å–∏–º GPT —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    messages.append({"role": "user", "content": "–°–¥–µ–ª–∞–π –¥–æ–≥–∞–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."})
                    short_messages = messages[:1] + messages[-11:]  # –º–∞–∫—Å–∏–º—É–º 6 —Ä–∞—É–Ω–¥–æ–≤ (assistant-user)
                    resp = client.chat.completions.create(
                        model=model_name,
                        messages=short_messages,
                        max_tokens=600
                    )
                    guess = resp.choices[0].message.content
                    question = f"–Ø –¥—É–º–∞—é, —ç—Ç–æ: {guess}"
                    current_genie = genie_images["happy"]  # –¥–∂–∏–Ω–Ω –¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≥–∞–¥–∫–æ–π
                    show_end_button = True

            if show_end_button and end_button.collidepoint(mouse_pos):
                running = False

    # —Ä–∏—Å—É–µ–º —Ñ–æ–Ω –∏ –¥–∂–∏–Ω–Ω–∞
    screen.blit(background, (0, 0))
    scaled_genie = pygame.transform.scale(current_genie, (420, 620))  # —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞
    screen.blit(scaled_genie, (240, 400))

    # —Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    draw_question_box(question, font, (20, 50), max_width=660)

    # —Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    for rect, label in zip(
        [button_yes, button_no, button_unknown, button_maybe_yes, button_maybe_no],
        ["–î–∞", "–ù–µ—Ç", "–ù–µ –∑–Ω–∞—é", "–°–∫–æ—Ä–µ–µ –¥–∞", "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"]
    ):
        color = (60, 130, 190) if pressed_button == label else (80, 160, 220)
        pygame.draw.rect(screen, color, rect)
        pygame.draw.rect(screen, (0, 0, 0), rect, 2)
        draw_button_text(label, rect)

    if show_end_button:
        pygame.draw.rect(screen, (200, 80, 80), end_button)
        pygame.draw.rect(screen, (0, 0, 0), end_button, 2)
        draw_button_text("–ö–æ–Ω–µ—Ü", end_button)

    pygame.display.flip()

pygame.quit()